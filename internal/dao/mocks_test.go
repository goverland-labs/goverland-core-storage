// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/goverland-labs/goverland-core-storage/internal/dao (interfaces: DataProvider,Publisher,DaoIDProvider)

// Package dao is a generated GoMock package.
package dao

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockDataProvider is a mock of DataProvider interface.
type MockDataProvider struct {
	ctrl     *gomock.Controller
	recorder *MockDataProviderMockRecorder
}

// MockDataProviderMockRecorder is the mock recorder for MockDataProvider.
type MockDataProviderMockRecorder struct {
	mock *MockDataProvider
}

// NewMockDataProvider creates a new mock instance.
func NewMockDataProvider(ctrl *gomock.Controller) *MockDataProvider {
	mock := &MockDataProvider{ctrl: ctrl}
	mock.recorder = &MockDataProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDataProvider) EXPECT() *MockDataProviderMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockDataProvider) Create(arg0 Dao) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockDataProviderMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockDataProvider)(nil).Create), arg0)
}

// GetByFilters mocks base method.
func (m *MockDataProvider) GetByFilters(arg0 []Filter, arg1 bool) (DaoList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByFilters", arg0, arg1)
	ret0, _ := ret[0].(DaoList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByFilters indicates an expected call of GetByFilters.
func (mr *MockDataProviderMockRecorder) GetByFilters(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByFilters", reflect.TypeOf((*MockDataProvider)(nil).GetByFilters), arg0, arg1)
}

// GetByID mocks base method.
func (m *MockDataProvider) GetByID(arg0 uuid.UUID) (*Dao, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", arg0)
	ret0, _ := ret[0].(*Dao)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockDataProviderMockRecorder) GetByID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockDataProvider)(nil).GetByID), arg0)
}

// GetCategories mocks base method.
func (m *MockDataProvider) GetCategories() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCategories")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCategories indicates an expected call of GetCategories.
func (mr *MockDataProviderMockRecorder) GetCategories() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCategories", reflect.TypeOf((*MockDataProvider)(nil).GetCategories))
}

// Update mocks base method.
func (m *MockDataProvider) Update(arg0 Dao) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockDataProviderMockRecorder) Update(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockDataProvider)(nil).Update), arg0)
}

// UpdateActiveVotes mocks base method.
func (m *MockDataProvider) UpdateActiveVotes(arg0 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateActiveVotes", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateActiveVotes indicates an expected call of UpdateActiveVotes.
func (mr *MockDataProviderMockRecorder) UpdateActiveVotes(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateActiveVotes", reflect.TypeOf((*MockDataProvider)(nil).UpdateActiveVotes), arg0)
}

// UpdateActiveVotesAll mocks base method.
func (m *MockDataProvider) UpdateActiveVotesAll() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateActiveVotesAll")
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateActiveVotesAll indicates an expected call of UpdateActiveVotesAll.
func (mr *MockDataProviderMockRecorder) UpdateActiveVotesAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateActiveVotesAll", reflect.TypeOf((*MockDataProvider)(nil).UpdateActiveVotesAll))
}

// UpdateProposalCnt mocks base method.
func (m *MockDataProvider) UpdateProposalCnt(arg0 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProposalCnt", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateProposalCnt indicates an expected call of UpdateProposalCnt.
func (mr *MockDataProviderMockRecorder) UpdateProposalCnt(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProposalCnt", reflect.TypeOf((*MockDataProvider)(nil).UpdateProposalCnt), arg0)
}

// MockPublisher is a mock of Publisher interface.
type MockPublisher struct {
	ctrl     *gomock.Controller
	recorder *MockPublisherMockRecorder
}

// MockPublisherMockRecorder is the mock recorder for MockPublisher.
type MockPublisherMockRecorder struct {
	mock *MockPublisher
}

// NewMockPublisher creates a new mock instance.
func NewMockPublisher(ctrl *gomock.Controller) *MockPublisher {
	mock := &MockPublisher{ctrl: ctrl}
	mock.recorder = &MockPublisherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPublisher) EXPECT() *MockPublisherMockRecorder {
	return m.recorder
}

// PublishJSON mocks base method.
func (m *MockPublisher) PublishJSON(arg0 context.Context, arg1 string, arg2 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublishJSON", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// PublishJSON indicates an expected call of PublishJSON.
func (mr *MockPublisherMockRecorder) PublishJSON(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishJSON", reflect.TypeOf((*MockPublisher)(nil).PublishJSON), arg0, arg1, arg2)
}

// MockDaoIDProvider is a mock of DaoIDProvider interface.
type MockDaoIDProvider struct {
	ctrl     *gomock.Controller
	recorder *MockDaoIDProviderMockRecorder
}

// MockDaoIDProviderMockRecorder is the mock recorder for MockDaoIDProvider.
type MockDaoIDProviderMockRecorder struct {
	mock *MockDaoIDProvider
}

// NewMockDaoIDProvider creates a new mock instance.
func NewMockDaoIDProvider(ctrl *gomock.Controller) *MockDaoIDProvider {
	mock := &MockDaoIDProvider{ctrl: ctrl}
	mock.recorder = &MockDaoIDProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDaoIDProvider) EXPECT() *MockDaoIDProviderMockRecorder {
	return m.recorder
}

// GetAll mocks base method.
func (m *MockDaoIDProvider) GetAll() ([]DaoID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].([]DaoID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockDaoIDProviderMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockDaoIDProvider)(nil).GetAll))
}

// GetOrCreate mocks base method.
func (m *MockDaoIDProvider) GetOrCreate(arg0 string) (uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrCreate", arg0)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrCreate indicates an expected call of GetOrCreate.
func (mr *MockDaoIDProviderMockRecorder) GetOrCreate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrCreate", reflect.TypeOf((*MockDaoIDProvider)(nil).GetOrCreate), arg0)
}
