// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.2
// source: storagepb/dao.proto

package storagepb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Dao_GetByID_FullMethodName                = "/storagepb.Dao/GetByID"
	Dao_GetByFilter_FullMethodName            = "/storagepb.Dao/GetByFilter"
	Dao_GetTopByCategories_FullMethodName     = "/storagepb.Dao/GetTopByCategories"
	Dao_GetRecommendationsList_FullMethodName = "/storagepb.Dao/GetRecommendationsList"
	Dao_GetTokenInfo_FullMethodName           = "/storagepb.Dao/GetTokenInfo"
	Dao_GetTokenChart_FullMethodName          = "/storagepb.Dao/GetTokenChart"
	Dao_PopulateTokenPrices_FullMethodName    = "/storagepb.Dao/PopulateTokenPrices"
	Dao_UpdateFungibleIds_FullMethodName      = "/storagepb.Dao/UpdateFungibleIds"
)

// DaoClient is the client API for Dao service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DaoClient interface {
	GetByID(ctx context.Context, in *DaoByIDRequest, opts ...grpc.CallOption) (*DaoByIDResponse, error)
	GetByFilter(ctx context.Context, in *DaoByFilterRequest, opts ...grpc.CallOption) (*DaoByFilterResponse, error)
	GetTopByCategories(ctx context.Context, in *TopByCategoriesRequest, opts ...grpc.CallOption) (*TopByCategoriesResponse, error)
	GetRecommendationsList(ctx context.Context, in *GetRecommendationsListRequest, opts ...grpc.CallOption) (*GetRecommendationsListResponse, error)
	GetTokenInfo(ctx context.Context, in *TokenInfoRequest, opts ...grpc.CallOption) (*TokenInfoResponse, error)
	GetTokenChart(ctx context.Context, in *TokenChartRequest, opts ...grpc.CallOption) (*TokenChartResponse, error)
	PopulateTokenPrices(ctx context.Context, in *TokenPricesRequest, opts ...grpc.CallOption) (*TokenPricesResponse, error)
	UpdateFungibleIds(ctx context.Context, in *UpdateFungibleIdsRequest, opts ...grpc.CallOption) (*UpdateFungibleIdsResponse, error)
}

type daoClient struct {
	cc grpc.ClientConnInterface
}

func NewDaoClient(cc grpc.ClientConnInterface) DaoClient {
	return &daoClient{cc}
}

func (c *daoClient) GetByID(ctx context.Context, in *DaoByIDRequest, opts ...grpc.CallOption) (*DaoByIDResponse, error) {
	out := new(DaoByIDResponse)
	err := c.cc.Invoke(ctx, Dao_GetByID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *daoClient) GetByFilter(ctx context.Context, in *DaoByFilterRequest, opts ...grpc.CallOption) (*DaoByFilterResponse, error) {
	out := new(DaoByFilterResponse)
	err := c.cc.Invoke(ctx, Dao_GetByFilter_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *daoClient) GetTopByCategories(ctx context.Context, in *TopByCategoriesRequest, opts ...grpc.CallOption) (*TopByCategoriesResponse, error) {
	out := new(TopByCategoriesResponse)
	err := c.cc.Invoke(ctx, Dao_GetTopByCategories_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *daoClient) GetRecommendationsList(ctx context.Context, in *GetRecommendationsListRequest, opts ...grpc.CallOption) (*GetRecommendationsListResponse, error) {
	out := new(GetRecommendationsListResponse)
	err := c.cc.Invoke(ctx, Dao_GetRecommendationsList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *daoClient) GetTokenInfo(ctx context.Context, in *TokenInfoRequest, opts ...grpc.CallOption) (*TokenInfoResponse, error) {
	out := new(TokenInfoResponse)
	err := c.cc.Invoke(ctx, Dao_GetTokenInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *daoClient) GetTokenChart(ctx context.Context, in *TokenChartRequest, opts ...grpc.CallOption) (*TokenChartResponse, error) {
	out := new(TokenChartResponse)
	err := c.cc.Invoke(ctx, Dao_GetTokenChart_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *daoClient) PopulateTokenPrices(ctx context.Context, in *TokenPricesRequest, opts ...grpc.CallOption) (*TokenPricesResponse, error) {
	out := new(TokenPricesResponse)
	err := c.cc.Invoke(ctx, Dao_PopulateTokenPrices_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *daoClient) UpdateFungibleIds(ctx context.Context, in *UpdateFungibleIdsRequest, opts ...grpc.CallOption) (*UpdateFungibleIdsResponse, error) {
	out := new(UpdateFungibleIdsResponse)
	err := c.cc.Invoke(ctx, Dao_UpdateFungibleIds_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DaoServer is the server API for Dao service.
// All implementations must embed UnimplementedDaoServer
// for forward compatibility
type DaoServer interface {
	GetByID(context.Context, *DaoByIDRequest) (*DaoByIDResponse, error)
	GetByFilter(context.Context, *DaoByFilterRequest) (*DaoByFilterResponse, error)
	GetTopByCategories(context.Context, *TopByCategoriesRequest) (*TopByCategoriesResponse, error)
	GetRecommendationsList(context.Context, *GetRecommendationsListRequest) (*GetRecommendationsListResponse, error)
	GetTokenInfo(context.Context, *TokenInfoRequest) (*TokenInfoResponse, error)
	GetTokenChart(context.Context, *TokenChartRequest) (*TokenChartResponse, error)
	PopulateTokenPrices(context.Context, *TokenPricesRequest) (*TokenPricesResponse, error)
	UpdateFungibleIds(context.Context, *UpdateFungibleIdsRequest) (*UpdateFungibleIdsResponse, error)
	mustEmbedUnimplementedDaoServer()
}

// UnimplementedDaoServer must be embedded to have forward compatible implementations.
type UnimplementedDaoServer struct {
}

func (UnimplementedDaoServer) GetByID(context.Context, *DaoByIDRequest) (*DaoByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByID not implemented")
}
func (UnimplementedDaoServer) GetByFilter(context.Context, *DaoByFilterRequest) (*DaoByFilterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByFilter not implemented")
}
func (UnimplementedDaoServer) GetTopByCategories(context.Context, *TopByCategoriesRequest) (*TopByCategoriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTopByCategories not implemented")
}
func (UnimplementedDaoServer) GetRecommendationsList(context.Context, *GetRecommendationsListRequest) (*GetRecommendationsListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRecommendationsList not implemented")
}
func (UnimplementedDaoServer) GetTokenInfo(context.Context, *TokenInfoRequest) (*TokenInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTokenInfo not implemented")
}
func (UnimplementedDaoServer) GetTokenChart(context.Context, *TokenChartRequest) (*TokenChartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTokenChart not implemented")
}
func (UnimplementedDaoServer) PopulateTokenPrices(context.Context, *TokenPricesRequest) (*TokenPricesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PopulateTokenPrices not implemented")
}
func (UnimplementedDaoServer) UpdateFungibleIds(context.Context, *UpdateFungibleIdsRequest) (*UpdateFungibleIdsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFungibleIds not implemented")
}
func (UnimplementedDaoServer) mustEmbedUnimplementedDaoServer() {}

// UnsafeDaoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DaoServer will
// result in compilation errors.
type UnsafeDaoServer interface {
	mustEmbedUnimplementedDaoServer()
}

func RegisterDaoServer(s grpc.ServiceRegistrar, srv DaoServer) {
	s.RegisterService(&Dao_ServiceDesc, srv)
}

func _Dao_GetByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DaoByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DaoServer).GetByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dao_GetByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DaoServer).GetByID(ctx, req.(*DaoByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dao_GetByFilter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DaoByFilterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DaoServer).GetByFilter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dao_GetByFilter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DaoServer).GetByFilter(ctx, req.(*DaoByFilterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dao_GetTopByCategories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TopByCategoriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DaoServer).GetTopByCategories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dao_GetTopByCategories_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DaoServer).GetTopByCategories(ctx, req.(*TopByCategoriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dao_GetRecommendationsList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRecommendationsListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DaoServer).GetRecommendationsList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dao_GetRecommendationsList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DaoServer).GetRecommendationsList(ctx, req.(*GetRecommendationsListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dao_GetTokenInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TokenInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DaoServer).GetTokenInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dao_GetTokenInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DaoServer).GetTokenInfo(ctx, req.(*TokenInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dao_GetTokenChart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TokenChartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DaoServer).GetTokenChart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dao_GetTokenChart_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DaoServer).GetTokenChart(ctx, req.(*TokenChartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dao_PopulateTokenPrices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TokenPricesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DaoServer).PopulateTokenPrices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dao_PopulateTokenPrices_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DaoServer).PopulateTokenPrices(ctx, req.(*TokenPricesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dao_UpdateFungibleIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFungibleIdsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DaoServer).UpdateFungibleIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dao_UpdateFungibleIds_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DaoServer).UpdateFungibleIds(ctx, req.(*UpdateFungibleIdsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Dao_ServiceDesc is the grpc.ServiceDesc for Dao service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Dao_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "storagepb.Dao",
	HandlerType: (*DaoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetByID",
			Handler:    _Dao_GetByID_Handler,
		},
		{
			MethodName: "GetByFilter",
			Handler:    _Dao_GetByFilter_Handler,
		},
		{
			MethodName: "GetTopByCategories",
			Handler:    _Dao_GetTopByCategories_Handler,
		},
		{
			MethodName: "GetRecommendationsList",
			Handler:    _Dao_GetRecommendationsList_Handler,
		},
		{
			MethodName: "GetTokenInfo",
			Handler:    _Dao_GetTokenInfo_Handler,
		},
		{
			MethodName: "GetTokenChart",
			Handler:    _Dao_GetTokenChart_Handler,
		},
		{
			MethodName: "PopulateTokenPrices",
			Handler:    _Dao_PopulateTokenPrices_Handler,
		},
		{
			MethodName: "UpdateFungibleIds",
			Handler:    _Dao_UpdateFungibleIds_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "storagepb/dao.proto",
}
