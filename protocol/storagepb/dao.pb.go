// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.32.0
// 	protoc        v4.25.2
// source: storagepb/dao.proto

package storagepb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type DaoByIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DaoId string `protobuf:"bytes,1,opt,name=dao_id,json=daoId,proto3" json:"dao_id,omitempty"`
}

func (x *DaoByIDRequest) Reset() {
	*x = DaoByIDRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storagepb_dao_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DaoByIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DaoByIDRequest) ProtoMessage() {}

func (x *DaoByIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_storagepb_dao_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DaoByIDRequest.ProtoReflect.Descriptor instead.
func (*DaoByIDRequest) Descriptor() ([]byte, []int) {
	return file_storagepb_dao_proto_rawDescGZIP(), []int{0}
}

func (x *DaoByIDRequest) GetDaoId() string {
	if x != nil {
		return x.DaoId
	}
	return ""
}

type Voting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Delay       uint64  `protobuf:"varint,1,opt,name=delay,proto3" json:"delay,omitempty"`
	Period      uint64  `protobuf:"varint,2,opt,name=period,proto3" json:"period,omitempty"`
	Type        string  `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	Quorum      float32 `protobuf:"fixed32,4,opt,name=quorum,proto3" json:"quorum,omitempty"`
	Blind       bool    `protobuf:"varint,5,opt,name=blind,proto3" json:"blind,omitempty"`
	HideAbstain bool    `protobuf:"varint,6,opt,name=hide_abstain,json=hideAbstain,proto3" json:"hide_abstain,omitempty"`
	Privacy     string  `protobuf:"bytes,7,opt,name=privacy,proto3" json:"privacy,omitempty"`
	Aliased     bool    `protobuf:"varint,8,opt,name=aliased,proto3" json:"aliased,omitempty"`
}

func (x *Voting) Reset() {
	*x = Voting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storagepb_dao_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Voting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Voting) ProtoMessage() {}

func (x *Voting) ProtoReflect() protoreflect.Message {
	mi := &file_storagepb_dao_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Voting.ProtoReflect.Descriptor instead.
func (*Voting) Descriptor() ([]byte, []int) {
	return file_storagepb_dao_proto_rawDescGZIP(), []int{1}
}

func (x *Voting) GetDelay() uint64 {
	if x != nil {
		return x.Delay
	}
	return 0
}

func (x *Voting) GetPeriod() uint64 {
	if x != nil {
		return x.Period
	}
	return 0
}

func (x *Voting) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Voting) GetQuorum() float32 {
	if x != nil {
		return x.Quorum
	}
	return 0
}

func (x *Voting) GetBlind() bool {
	if x != nil {
		return x.Blind
	}
	return false
}

func (x *Voting) GetHideAbstain() bool {
	if x != nil {
		return x.HideAbstain
	}
	return false
}

func (x *Voting) GetPrivacy() string {
	if x != nil {
		return x.Privacy
	}
	return ""
}

func (x *Voting) GetAliased() bool {
	if x != nil {
		return x.Aliased
	}
	return false
}

type Treasury struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name    string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Address string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	Network string `protobuf:"bytes,3,opt,name=network,proto3" json:"network,omitempty"`
}

func (x *Treasury) Reset() {
	*x = Treasury{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storagepb_dao_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Treasury) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Treasury) ProtoMessage() {}

func (x *Treasury) ProtoReflect() protoreflect.Message {
	mi := &file_storagepb_dao_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Treasury.ProtoReflect.Descriptor instead.
func (*Treasury) Descriptor() ([]byte, []int) {
	return file_storagepb_dao_proto_rawDescGZIP(), []int{2}
}

func (x *Treasury) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Treasury) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *Treasury) GetNetwork() string {
	if x != nil {
		return x.Network
	}
	return ""
}

type DaoInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	CreatedAt      *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt      *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	Name           string                 `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Private        bool                   `protobuf:"varint,5,opt,name=private,proto3" json:"private,omitempty"`
	About          string                 `protobuf:"bytes,6,opt,name=about,proto3" json:"about,omitempty"`
	Avatar         string                 `protobuf:"bytes,7,opt,name=avatar,proto3" json:"avatar,omitempty"`
	Terms          string                 `protobuf:"bytes,8,opt,name=terms,proto3" json:"terms,omitempty"`
	Location       string                 `protobuf:"bytes,9,opt,name=location,proto3" json:"location,omitempty"`
	Website        string                 `protobuf:"bytes,10,opt,name=website,proto3" json:"website,omitempty"`
	Twitter        string                 `protobuf:"bytes,11,opt,name=twitter,proto3" json:"twitter,omitempty"`
	Github         string                 `protobuf:"bytes,12,opt,name=github,proto3" json:"github,omitempty"`
	Coingeko       string                 `protobuf:"bytes,13,opt,name=coingeko,proto3" json:"coingeko,omitempty"`
	Email          string                 `protobuf:"bytes,14,opt,name=email,proto3" json:"email,omitempty"`
	Network        string                 `protobuf:"bytes,15,opt,name=network,proto3" json:"network,omitempty"`
	Symbol         string                 `protobuf:"bytes,16,opt,name=symbol,proto3" json:"symbol,omitempty"`
	Skin           string                 `protobuf:"bytes,17,opt,name=skin,proto3" json:"skin,omitempty"`
	Domain         string                 `protobuf:"bytes,18,opt,name=domain,proto3" json:"domain,omitempty"`
	Strategies     []*Strategy            `protobuf:"bytes,19,rep,name=strategies,proto3" json:"strategies,omitempty"`
	Voting         *Voting                `protobuf:"bytes,20,opt,name=voting,proto3" json:"voting,omitempty"`
	Categories     []string               `protobuf:"bytes,21,rep,name=categories,proto3" json:"categories,omitempty"`
	Treasuries     []*Treasury            `protobuf:"bytes,22,rep,name=treasuries,proto3" json:"treasuries,omitempty"`
	FollowersCount uint64                 `protobuf:"varint,23,opt,name=followers_count,json=followersCount,proto3" json:"followers_count,omitempty"`
	ProposalsCount uint64                 `protobuf:"varint,24,opt,name=proposals_count,json=proposalsCount,proto3" json:"proposals_count,omitempty"`
	Guidelines     string                 `protobuf:"bytes,25,opt,name=guidelines,proto3" json:"guidelines,omitempty"`
	Template       string                 `protobuf:"bytes,26,opt,name=template,proto3" json:"template,omitempty"`
	ParentId       string                 `protobuf:"bytes,27,opt,name=parent_id,json=parentId,proto3" json:"parent_id,omitempty"`
	Alias          string                 `protobuf:"bytes,28,opt,name=alias,proto3" json:"alias,omitempty"`
	ActivitySince  uint64                 `protobuf:"varint,29,opt,name=activity_since,json=activitySince,proto3" json:"activity_since,omitempty"`
	VotersCount    uint64                 `protobuf:"varint,30,opt,name=voters_count,json=votersCount,proto3" json:"voters_count,omitempty"`
	ActiveVotes    uint64                 `protobuf:"varint,31,opt,name=active_votes,json=activeVotes,proto3" json:"active_votes,omitempty"`
	Verified       bool                   `protobuf:"varint,32,opt,name=verified,proto3" json:"verified,omitempty"`
}

func (x *DaoInfo) Reset() {
	*x = DaoInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storagepb_dao_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DaoInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DaoInfo) ProtoMessage() {}

func (x *DaoInfo) ProtoReflect() protoreflect.Message {
	mi := &file_storagepb_dao_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DaoInfo.ProtoReflect.Descriptor instead.
func (*DaoInfo) Descriptor() ([]byte, []int) {
	return file_storagepb_dao_proto_rawDescGZIP(), []int{3}
}

func (x *DaoInfo) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DaoInfo) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *DaoInfo) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *DaoInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DaoInfo) GetPrivate() bool {
	if x != nil {
		return x.Private
	}
	return false
}

func (x *DaoInfo) GetAbout() string {
	if x != nil {
		return x.About
	}
	return ""
}

func (x *DaoInfo) GetAvatar() string {
	if x != nil {
		return x.Avatar
	}
	return ""
}

func (x *DaoInfo) GetTerms() string {
	if x != nil {
		return x.Terms
	}
	return ""
}

func (x *DaoInfo) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

func (x *DaoInfo) GetWebsite() string {
	if x != nil {
		return x.Website
	}
	return ""
}

func (x *DaoInfo) GetTwitter() string {
	if x != nil {
		return x.Twitter
	}
	return ""
}

func (x *DaoInfo) GetGithub() string {
	if x != nil {
		return x.Github
	}
	return ""
}

func (x *DaoInfo) GetCoingeko() string {
	if x != nil {
		return x.Coingeko
	}
	return ""
}

func (x *DaoInfo) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *DaoInfo) GetNetwork() string {
	if x != nil {
		return x.Network
	}
	return ""
}

func (x *DaoInfo) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *DaoInfo) GetSkin() string {
	if x != nil {
		return x.Skin
	}
	return ""
}

func (x *DaoInfo) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *DaoInfo) GetStrategies() []*Strategy {
	if x != nil {
		return x.Strategies
	}
	return nil
}

func (x *DaoInfo) GetVoting() *Voting {
	if x != nil {
		return x.Voting
	}
	return nil
}

func (x *DaoInfo) GetCategories() []string {
	if x != nil {
		return x.Categories
	}
	return nil
}

func (x *DaoInfo) GetTreasuries() []*Treasury {
	if x != nil {
		return x.Treasuries
	}
	return nil
}

func (x *DaoInfo) GetFollowersCount() uint64 {
	if x != nil {
		return x.FollowersCount
	}
	return 0
}

func (x *DaoInfo) GetProposalsCount() uint64 {
	if x != nil {
		return x.ProposalsCount
	}
	return 0
}

func (x *DaoInfo) GetGuidelines() string {
	if x != nil {
		return x.Guidelines
	}
	return ""
}

func (x *DaoInfo) GetTemplate() string {
	if x != nil {
		return x.Template
	}
	return ""
}

func (x *DaoInfo) GetParentId() string {
	if x != nil {
		return x.ParentId
	}
	return ""
}

func (x *DaoInfo) GetAlias() string {
	if x != nil {
		return x.Alias
	}
	return ""
}

func (x *DaoInfo) GetActivitySince() uint64 {
	if x != nil {
		return x.ActivitySince
	}
	return 0
}

func (x *DaoInfo) GetVotersCount() uint64 {
	if x != nil {
		return x.VotersCount
	}
	return 0
}

func (x *DaoInfo) GetActiveVotes() uint64 {
	if x != nil {
		return x.ActiveVotes
	}
	return 0
}

func (x *DaoInfo) GetVerified() bool {
	if x != nil {
		return x.Verified
	}
	return false
}

type DaoByIDResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dao *DaoInfo `protobuf:"bytes,1,opt,name=dao,proto3" json:"dao,omitempty"`
}

func (x *DaoByIDResponse) Reset() {
	*x = DaoByIDResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storagepb_dao_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DaoByIDResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DaoByIDResponse) ProtoMessage() {}

func (x *DaoByIDResponse) ProtoReflect() protoreflect.Message {
	mi := &file_storagepb_dao_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DaoByIDResponse.ProtoReflect.Descriptor instead.
func (*DaoByIDResponse) Descriptor() ([]byte, []int) {
	return file_storagepb_dao_proto_rawDescGZIP(), []int{4}
}

func (x *DaoByIDResponse) GetDao() *DaoInfo {
	if x != nil {
		return x.Dao
	}
	return nil
}

type DaoByFilterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Query    *string  `protobuf:"bytes,1,opt,name=query,proto3,oneof" json:"query,omitempty"`
	Category *string  `protobuf:"bytes,2,opt,name=category,proto3,oneof" json:"category,omitempty"`
	Limit    *uint64  `protobuf:"varint,3,opt,name=limit,proto3,oneof" json:"limit,omitempty"`
	Offset   *uint64  `protobuf:"varint,4,opt,name=offset,proto3,oneof" json:"offset,omitempty"`
	DaoIds   []string `protobuf:"bytes,5,rep,name=dao_ids,json=daoIds,proto3" json:"dao_ids,omitempty"`
}

func (x *DaoByFilterRequest) Reset() {
	*x = DaoByFilterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storagepb_dao_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DaoByFilterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DaoByFilterRequest) ProtoMessage() {}

func (x *DaoByFilterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_storagepb_dao_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DaoByFilterRequest.ProtoReflect.Descriptor instead.
func (*DaoByFilterRequest) Descriptor() ([]byte, []int) {
	return file_storagepb_dao_proto_rawDescGZIP(), []int{5}
}

func (x *DaoByFilterRequest) GetQuery() string {
	if x != nil && x.Query != nil {
		return *x.Query
	}
	return ""
}

func (x *DaoByFilterRequest) GetCategory() string {
	if x != nil && x.Category != nil {
		return *x.Category
	}
	return ""
}

func (x *DaoByFilterRequest) GetLimit() uint64 {
	if x != nil && x.Limit != nil {
		return *x.Limit
	}
	return 0
}

func (x *DaoByFilterRequest) GetOffset() uint64 {
	if x != nil && x.Offset != nil {
		return *x.Offset
	}
	return 0
}

func (x *DaoByFilterRequest) GetDaoIds() []string {
	if x != nil {
		return x.DaoIds
	}
	return nil
}

type DaoByFilterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Daos       []*DaoInfo `protobuf:"bytes,1,rep,name=daos,proto3" json:"daos,omitempty"`
	TotalCount uint64     `protobuf:"varint,2,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`
}

func (x *DaoByFilterResponse) Reset() {
	*x = DaoByFilterResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storagepb_dao_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DaoByFilterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DaoByFilterResponse) ProtoMessage() {}

func (x *DaoByFilterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_storagepb_dao_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DaoByFilterResponse.ProtoReflect.Descriptor instead.
func (*DaoByFilterResponse) Descriptor() ([]byte, []int) {
	return file_storagepb_dao_proto_rawDescGZIP(), []int{6}
}

func (x *DaoByFilterResponse) GetDaos() []*DaoInfo {
	if x != nil {
		return x.Daos
	}
	return nil
}

func (x *DaoByFilterResponse) GetTotalCount() uint64 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

type TopCategory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Category   string     `protobuf:"bytes,1,opt,name=category,proto3" json:"category,omitempty"`
	Daos       []*DaoInfo `protobuf:"bytes,2,rep,name=daos,proto3" json:"daos,omitempty"`
	TotalCount uint64     `protobuf:"varint,3,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`
}

func (x *TopCategory) Reset() {
	*x = TopCategory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storagepb_dao_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TopCategory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TopCategory) ProtoMessage() {}

func (x *TopCategory) ProtoReflect() protoreflect.Message {
	mi := &file_storagepb_dao_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TopCategory.ProtoReflect.Descriptor instead.
func (*TopCategory) Descriptor() ([]byte, []int) {
	return file_storagepb_dao_proto_rawDescGZIP(), []int{7}
}

func (x *TopCategory) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

func (x *TopCategory) GetDaos() []*DaoInfo {
	if x != nil {
		return x.Daos
	}
	return nil
}

func (x *TopCategory) GetTotalCount() uint64 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

type TopByCategoriesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit uint64 `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *TopByCategoriesRequest) Reset() {
	*x = TopByCategoriesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storagepb_dao_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TopByCategoriesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TopByCategoriesRequest) ProtoMessage() {}

func (x *TopByCategoriesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_storagepb_dao_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TopByCategoriesRequest.ProtoReflect.Descriptor instead.
func (*TopByCategoriesRequest) Descriptor() ([]byte, []int) {
	return file_storagepb_dao_proto_rawDescGZIP(), []int{8}
}

func (x *TopByCategoriesRequest) GetLimit() uint64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type TopByCategoriesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Categories []*TopCategory `protobuf:"bytes,1,rep,name=categories,proto3" json:"categories,omitempty"`
}

func (x *TopByCategoriesResponse) Reset() {
	*x = TopByCategoriesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_storagepb_dao_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TopByCategoriesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TopByCategoriesResponse) ProtoMessage() {}

func (x *TopByCategoriesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_storagepb_dao_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TopByCategoriesResponse.ProtoReflect.Descriptor instead.
func (*TopByCategoriesResponse) Descriptor() ([]byte, []int) {
	return file_storagepb_dao_proto_rawDescGZIP(), []int{9}
}

func (x *TopByCategoriesResponse) GetCategories() []*TopCategory {
	if x != nil {
		return x.Categories
	}
	return nil
}

var File_storagepb_dao_proto protoreflect.FileDescriptor

var file_storagepb_dao_proto_rawDesc = []byte{
	0x0a, 0x13, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x70, 0x62, 0x2f, 0x64, 0x61, 0x6f, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x70, 0x62,
	0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x14, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x70, 0x62, 0x2f, 0x62, 0x61, 0x73,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x27, 0x0a, 0x0e, 0x44, 0x61, 0x6f, 0x42, 0x79,
	0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x64, 0x61, 0x6f,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x64, 0x61, 0x6f, 0x49, 0x64,
	0x22, 0xcf, 0x01, 0x0a, 0x06, 0x56, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x64,
	0x65, 0x6c, 0x61, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x64, 0x65, 0x6c, 0x61,
	0x79, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x71, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x71,
	0x75, 0x6f, 0x72, 0x75, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x6c, 0x69, 0x6e, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x62, 0x6c, 0x69, 0x6e, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x68,
	0x69, 0x64, 0x65, 0x5f, 0x61, 0x62, 0x73, 0x74, 0x61, 0x69, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0b, 0x68, 0x69, 0x64, 0x65, 0x41, 0x62, 0x73, 0x74, 0x61, 0x69, 0x6e, 0x12, 0x18,
	0x0a, 0x07, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x6c, 0x69, 0x61,
	0x73, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x61, 0x6c, 0x69, 0x61, 0x73,
	0x65, 0x64, 0x22, 0x52, 0x0a, 0x08, 0x54, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x79, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x22, 0xf8, 0x07, 0x0a, 0x07, 0x44, 0x61, 0x6f, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a,
	0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x70,
	0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x76,
	0x61, 0x74, 0x61, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x65, 0x72, 0x6d, 0x73, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x65, 0x72, 0x6d, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x77, 0x65, 0x62, 0x73, 0x69, 0x74,
	0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x77, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x74, 0x77, 0x69, 0x74, 0x74, 0x65, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x74, 0x77, 0x69, 0x74, 0x74, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x69, 0x6e, 0x67, 0x65, 0x6b, 0x6f, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x69, 0x6e, 0x67, 0x65, 0x6b, 0x6f, 0x12, 0x14,
	0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65,
	0x6d, 0x61, 0x69, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6b, 0x69, 0x6e, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x6b, 0x69, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x12, 0x33, 0x0a, 0x0a, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x69, 0x65, 0x73,
	0x18, 0x13, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x70, 0x62, 0x2e, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x52, 0x0a, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x65, 0x67, 0x69, 0x65, 0x73, 0x12, 0x29, 0x0a, 0x06, 0x76, 0x6f, 0x74, 0x69, 0x6e,
	0x67, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x70, 0x62, 0x2e, 0x56, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x06, 0x76, 0x6f, 0x74, 0x69,
	0x6e, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73,
	0x18, 0x15, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69,
	0x65, 0x73, 0x12, 0x33, 0x0a, 0x0a, 0x74, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x69, 0x65, 0x73,
	0x18, 0x16, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x70, 0x62, 0x2e, 0x54, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x79, 0x52, 0x0a, 0x74, 0x72, 0x65,
	0x61, 0x73, 0x75, 0x72, 0x69, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x66, 0x6f, 0x6c, 0x6c, 0x6f,
	0x77, 0x65, 0x72, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x17, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0e, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x27, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x73, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x18, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x70, 0x6f,
	0x73, 0x61, 0x6c, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x67, 0x75, 0x69,
	0x64, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x67,
	0x75, 0x69, 0x64, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x1c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x69, 0x6e, 0x63, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0d, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x53, 0x69, 0x6e, 0x63, 0x65, 0x12,
	0x21, 0x0a, 0x0c, 0x76, 0x6f, 0x74, 0x65, 0x72, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x1e, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x76, 0x6f, 0x74, 0x65, 0x72, 0x73, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x76, 0x6f, 0x74,
	0x65, 0x73, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x56, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x18, 0x20, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x22, 0x37, 0x0a, 0x0f, 0x44, 0x61, 0x6f, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x24, 0x0a, 0x03, 0x64, 0x61, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x70, 0x62, 0x2e, 0x44, 0x61,
	0x6f, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x03, 0x64, 0x61, 0x6f, 0x22, 0xcd, 0x01, 0x0a, 0x12, 0x44,
	0x61, 0x6f, 0x42, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x19, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08,
	0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01,
	0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a,
	0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x48, 0x02, 0x52, 0x05,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x48, 0x03, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x07, 0x64, 0x61, 0x6f, 0x5f, 0x69, 0x64, 0x73,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x64, 0x61, 0x6f, 0x49, 0x64, 0x73, 0x42, 0x08,
	0x0a, 0x06, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x63, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x42,
	0x09, 0x0a, 0x07, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x22, 0x5e, 0x0a, 0x13, 0x44, 0x61,
	0x6f, 0x42, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x26, 0x0a, 0x04, 0x64, 0x61, 0x6f, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x70, 0x62, 0x2e, 0x44, 0x61, 0x6f, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x04, 0x64, 0x61, 0x6f, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x72, 0x0a, 0x0b, 0x54, 0x6f,
	0x70, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x26, 0x0a, 0x04, 0x64, 0x61, 0x6f, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x70, 0x62, 0x2e,
	0x44, 0x61, 0x6f, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x64, 0x61, 0x6f, 0x73, 0x12, 0x1f, 0x0a,
	0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x2e,
	0x0a, 0x16, 0x54, 0x6f, 0x70, 0x42, 0x79, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x51,
	0x0a, 0x17, 0x54, 0x6f, 0x70, 0x42, 0x79, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x0a, 0x63, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x70, 0x62, 0x2e, 0x54, 0x6f, 0x70, 0x43, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65,
	0x73, 0x32, 0xf2, 0x01, 0x0a, 0x03, 0x44, 0x61, 0x6f, 0x12, 0x40, 0x0a, 0x07, 0x47, 0x65, 0x74,
	0x42, 0x79, 0x49, 0x44, 0x12, 0x19, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x70, 0x62,
	0x2e, 0x44, 0x61, 0x6f, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1a, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x70, 0x62, 0x2e, 0x44, 0x61, 0x6f, 0x42,
	0x79, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4c, 0x0a, 0x0b, 0x47,
	0x65, 0x74, 0x42, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x1d, 0x2e, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x70, 0x62, 0x2e, 0x44, 0x61, 0x6f, 0x42, 0x79, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x70, 0x62, 0x2e, 0x44, 0x61, 0x6f, 0x42, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5b, 0x0a, 0x12, 0x47, 0x65, 0x74,
	0x54, 0x6f, 0x70, 0x42, 0x79, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x12,
	0x21, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x70, 0x62, 0x2e, 0x54, 0x6f, 0x70, 0x42,
	0x79, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x22, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x70, 0x62, 0x2e, 0x54,
	0x6f, 0x70, 0x42, 0x79, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x0d, 0x5a, 0x0b, 0x2e, 0x3b, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_storagepb_dao_proto_rawDescOnce sync.Once
	file_storagepb_dao_proto_rawDescData = file_storagepb_dao_proto_rawDesc
)

func file_storagepb_dao_proto_rawDescGZIP() []byte {
	file_storagepb_dao_proto_rawDescOnce.Do(func() {
		file_storagepb_dao_proto_rawDescData = protoimpl.X.CompressGZIP(file_storagepb_dao_proto_rawDescData)
	})
	return file_storagepb_dao_proto_rawDescData
}

var file_storagepb_dao_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_storagepb_dao_proto_goTypes = []interface{}{
	(*DaoByIDRequest)(nil),          // 0: storagepb.DaoByIDRequest
	(*Voting)(nil),                  // 1: storagepb.Voting
	(*Treasury)(nil),                // 2: storagepb.Treasury
	(*DaoInfo)(nil),                 // 3: storagepb.DaoInfo
	(*DaoByIDResponse)(nil),         // 4: storagepb.DaoByIDResponse
	(*DaoByFilterRequest)(nil),      // 5: storagepb.DaoByFilterRequest
	(*DaoByFilterResponse)(nil),     // 6: storagepb.DaoByFilterResponse
	(*TopCategory)(nil),             // 7: storagepb.TopCategory
	(*TopByCategoriesRequest)(nil),  // 8: storagepb.TopByCategoriesRequest
	(*TopByCategoriesResponse)(nil), // 9: storagepb.TopByCategoriesResponse
	(*timestamppb.Timestamp)(nil),   // 10: google.protobuf.Timestamp
	(*Strategy)(nil),                // 11: storagepb.Strategy
}
var file_storagepb_dao_proto_depIdxs = []int32{
	10, // 0: storagepb.DaoInfo.created_at:type_name -> google.protobuf.Timestamp
	10, // 1: storagepb.DaoInfo.updated_at:type_name -> google.protobuf.Timestamp
	11, // 2: storagepb.DaoInfo.strategies:type_name -> storagepb.Strategy
	1,  // 3: storagepb.DaoInfo.voting:type_name -> storagepb.Voting
	2,  // 4: storagepb.DaoInfo.treasuries:type_name -> storagepb.Treasury
	3,  // 5: storagepb.DaoByIDResponse.dao:type_name -> storagepb.DaoInfo
	3,  // 6: storagepb.DaoByFilterResponse.daos:type_name -> storagepb.DaoInfo
	3,  // 7: storagepb.TopCategory.daos:type_name -> storagepb.DaoInfo
	7,  // 8: storagepb.TopByCategoriesResponse.categories:type_name -> storagepb.TopCategory
	0,  // 9: storagepb.Dao.GetByID:input_type -> storagepb.DaoByIDRequest
	5,  // 10: storagepb.Dao.GetByFilter:input_type -> storagepb.DaoByFilterRequest
	8,  // 11: storagepb.Dao.GetTopByCategories:input_type -> storagepb.TopByCategoriesRequest
	4,  // 12: storagepb.Dao.GetByID:output_type -> storagepb.DaoByIDResponse
	6,  // 13: storagepb.Dao.GetByFilter:output_type -> storagepb.DaoByFilterResponse
	9,  // 14: storagepb.Dao.GetTopByCategories:output_type -> storagepb.TopByCategoriesResponse
	12, // [12:15] is the sub-list for method output_type
	9,  // [9:12] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_storagepb_dao_proto_init() }
func file_storagepb_dao_proto_init() {
	if File_storagepb_dao_proto != nil {
		return
	}
	file_storagepb_base_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_storagepb_dao_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DaoByIDRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storagepb_dao_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Voting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storagepb_dao_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Treasury); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storagepb_dao_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DaoInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storagepb_dao_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DaoByIDResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storagepb_dao_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DaoByFilterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storagepb_dao_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DaoByFilterResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storagepb_dao_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TopCategory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storagepb_dao_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TopByCategoriesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_storagepb_dao_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TopByCategoriesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_storagepb_dao_proto_msgTypes[5].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_storagepb_dao_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_storagepb_dao_proto_goTypes,
		DependencyIndexes: file_storagepb_dao_proto_depIdxs,
		MessageInfos:      file_storagepb_dao_proto_msgTypes,
	}.Build()
	File_storagepb_dao_proto = out.File
	file_storagepb_dao_proto_rawDesc = nil
	file_storagepb_dao_proto_goTypes = nil
	file_storagepb_dao_proto_depIdxs = nil
}
